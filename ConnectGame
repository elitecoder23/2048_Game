package hw3;

import java.util.ArrayList;
import java.util.Random;

import api.ScoreUpdateListener;
import api.ShowDialogListener;
import api.Tile;

/**
 * Class that models a game.
 */
public class ConnectGame 

{
	private long gameScore;
	
	
	private ShowDialogListener dialogListener;
	
	private ScoreUpdateListener scoreListener;
	
	private Tile currentTileSelected;
	
	private Grid completeGrid;
	
	private int tileWidth;
	
	private ArrayList<Tile> list = new ArrayList<>();
	
	private Tile prevTile;
	
	private int minGrid;
	
	private boolean theInitialTileSelected;
	
	private int tileHeight;
	
	private int maxGrid;
	
	
	
	
	
	
	
	
	
	
	/**
	 * Constructs a new ConnectGame object with given grid dimensions and minimum
	 * and maximum tile levels.
	 * 
	 * @param width  grid width
	 * @param height grid height
	 * @param min    minimum tile level
	 * @param max    maximum tile level
	 * @param rand   random number generator
	 */
	public ConnectGame(int width, int height, int min, int max, Random rand) 
	{
		
		completeGrid = new Grid(width, height);
		
		tileWidth = width;
		
		tileHeight = height;
		
		minGrid = min;
		
		maxGrid = max;
		
	}

	/**
	 * Gets a random tile with level between minimum tile level inclusive and
	 * maximum tile level exclusive. For example, if minimum is 1 and maximum is 4,
	 * the random tile can be either 1, 2, or 3.
	 * <p>
	 * DO NOT RETURN TILES WITH MAXIMUM LEVEL
	 * 
	 * @return a tile with random level between minimum inclusive and maximum
	 *         exclusive
	 */
	public Tile getRandomTile() 
	{
		
		Random random = new Random();
		
	    int level = random.nextInt( maxGrid - minGrid ) +  minGrid;
	    
	    Tile mainTile = new Tile(level);
	    
	    return mainTile;
	}
	

	/**
	 * Regenerates the grid with all random tiles produced by getRandomTile().
	 */
	public void radomizeTiles() 
	
	{
		
		
		for (int horizontal = 0; horizontal < tileHeight; horizontal++) {
			
	        for (int vertical = 0; vertical < tileWidth; vertical++) {
	        	
	            completeGrid.setTile(getRandomTile(), vertical, horizontal);
	        }
	    }
	}

	/**
	 * Determines if two tiles are adjacent to each other. The may be next to each
	 * other horizontally, vertically, or diagonally.
	 * 
	 * @param t1 one of the two tiles
	 * @param t2 one of the two tiles
	 * @return true if they are next to each other horizontally, vertically, or
	 *         diagonally on the grid, false otherwise
	 */
	public boolean isAdjacent(Tile t1, Tile t2) {
		// TODO
		
		
		int x = t1.getX();
		
		int y = t1.getY();
		
		int x2 = t2.getX();
		
		int y2 = t2.getY();
		
		
		
		if(y==y2 && (x==x2-1 || x== x2+1)) {
			
			return true;
			
		} if(x==x2 && (y==y2-1 || y == y2+1)){
			return true;
		}
		if((y == y2+1 || y == y2-1) && (x==x2+1 || x==x2-1))
		{
			return true;
			
		}
		return false;
		
	}

	/**
	 * Indicates the user is trying to select (clicked on) a tile to start a new
	 * selection of tiles.
	 * <p>
	 * If a selection of tiles is already in progress, the method should do nothing
	 * and return false.
	 * <p>
	 * If a selection is not already in progress (this is the first tile selected),
	 * then start a new selection of tiles and return true.
	 * 
	 * @param x the column of the tile selected
	 * @param y the row of the tile selected
	 * @return true if this is the first tile selected, otherwise false
	 */
	public boolean tryFirstSelect(int x, int y)
	{
		// TODO
		
		if(list.isEmpty())
			
		{
			Tile tt = completeGrid.getTile(x, y);
			
			tt.setSelect(true);
			
			list.add(tt);
			
			return true;
		}
		
		return false;
	}

	/**
	 * Indicates the user is trying to select (mouse over) a tile to add to the
	 * selected sequence of tiles. The rules of a sequence of tiles are:
	 * 
	 * <pre>
	 * 1. The first two tiles must have the same level.
	 * 2. After the first two, each tile must have the same level or one greater than the level of the previous tile.
	 * </pre>
	 * 
	 * For example, given the sequence: 1, 1, 2, 2, 2, 3. The next selected tile
	 * could be a 3 or a 4. If the use tries to select an invalid tile, the method
	 * should do nothing. If the user selects a valid tile, the tile should be added
	 * to the list of selected tiles.
	 * 
	 * @param x the column of the tile selected
	 * @param y the row of the tile selected
	 */
	public void tryContinueSelect(int x, int y) 
	{
		// TODO
		
		 Tile tt = completeGrid.getTile(x, y);
		    
		    if (list.size() > 1 && tt == list.get(list.size() - 2)) 
		    {
		        Tile lastPressFile = list.get(list.size() - 1);
		        
		        lastPressFile.setSelect(false);
		        
		        list.remove(list.size() - 1);
		        
		        return;
		    }
		    
		    if (!tt.isSelected() && 
		    		isAdjacent(tt, list.get(list.size() - 1))) {
		    	
		        int initialLev = list.get(0).getLevel();
		        
		        int finalLev = list.get(list.size() - 1).getLevel();
		        
		        int presentTiLev = tt.getLevel();
		        

		        if (list.size() == 1) 
		        {
		        	
		            if (presentTiLev == initialLev) 
		            {
		                tt.setSelect(true);
		                
		                list.add(tt);
		            }
		            
		        } else if (presentTiLev == finalLev 
		        		|| presentTiLev == finalLev + 1) 
		        {
		            tt.setSelect(true);
		            
		            list.add(tt);
		        }
		    }
		}



	/**
	 * Indicates the user is trying to finish selecting (click on) a sequence of
	 * tiles. If the method is not called for the last selected tile, it should do
	 * nothing and return false. Otherwise it should do the following:
	 * 
	 * <pre>
	 * 1. When the selection contains only 1 tile reset the selection and make sure all tiles selected is set to false.
	 * 2. When the selection contains more than one block:
	 *     a. Upgrade the last selected tiles with upgradeLastSelectedTile().
	 *     b. Drop all other selected tiles with dropSelected().
	 *     c. Reset the selection and make sure all tiles selected is set to false.
	 * </pre>
	 * 
	 * @param x the column of the tile selected
	 * @param y the row of the tile selected
	 * @return return false if the tile was not selected, otherwise return true
	 */
	public boolean tryFinishSelection(int x, int y) 
	{
		
		 Tile tt = completeGrid.getTile(x, y);
		 
		 

	        if (tt != list.get(list.size() - 1)) 
	        {
	            return false;
	        }

	        if (list.size() == 
	        		1) 
	        {
	            tt.setSelect(false);
	            list.clear();
	            return true;
	        }
	        
	        for(Tile chosen : 
	        	list) 
	        
	        {
	        	gameScore += chosen.getValue();
	        	
	        	chosen.setSelect(false);
	        }
	        // Update the total score
	        

	        upgradeLastSelectedTile();
	        
	        dropSelected();
	        
	        list.clear();
	        
	        setScore(gameScore);
	        
	        scoreListener.updateScore(gameScore);
	        
	        return true;
	    }

	/**
	 * Increases the level of the last selected tile by 1 and removes that tile from
	 * the list of selected tiles. The tile itself should be set to unselected.
	 * <p>
	 * If the upgrade results in a tile that is greater than the current maximum
	 * tile level, both the minimum and maximum tile level are increased by 1. A
	 * message dialog should also be displayed with the message "New block 32,
	 * removing blocks 2". Not that the message shows tile values and not levels.
	 * Display a message is performed with dialogListener.showDialog("Hello,
	 * World!");
	 */
	public void upgradeLastSelectedTile() 
	{
		// TODO
		if (list.isEmpty()) 
		{
            return;
        }

        Tile lastTile = list.get(list.size() - 1);
        
        int updateLev = lastTile.getLevel() + 1;
        
        lastTile.setSelect(false);
        

        if (maxGrid < updateLev) 
        {
            minGrid++;
            
            maxGrid++;
            
            dialogListener.showDialog("New block " + lastTile.getLevel() +
                                       ", removing blocks " + lastTile.getLevel());
        } else 
        	
        {
            lastTile.setLevel(updateLev);
        }

        list.remove(lastTile);
	}

	/**
	 * Gets the selected tiles in the form of an array. This does not mean selected
	 * tiles must be stored in this class as a array.
	 * 
	 * @return the selected tiles in the form of an array
	 */
	public Tile[] getSelectedAsArray() 
	{
		
		return list.toArray(new Tile[list.size()]);
	}

	/**
	 * Removes all tiles of a particular level from the grid. When a tile is
	 * removed, the tiles above it drop down one spot and a new random tile is
	 * placed at the top of the grid.
	 * 
	 * @param level the level of tile to remove
	 */
	public void dropLevel(int level) 
	{
		
		for (int x = 0; x < completeGrid.getWidth(); x++)
			
		{
			ArrayList<Tile> columnTiles = new ArrayList<>();
			for (int y = 0; y < completeGrid.getHeight(); y++)
				
			{
				Tile mainTile = completeGrid.getTile(x, y);
				if (mainTile.getLevel() != level)
					
				{
					columnTiles.add(mainTile);
				}
			}
			
			while (columnTiles.size() < completeGrid.getHeight())
				
			{
				columnTiles.add(0, getRandomTile());
			}
			
			for (int y = 0; y < completeGrid.getHeight(); y++)
				
			{
				completeGrid.setTile(columnTiles.get(y), x, y);
			}
		}
	}

	/**
	 * Removes all selected tiles from the grid. When a tile is removed, the tiles
	 * above it drop down one spot and a new random tile is placed at the top of the
	 * grid.
	 */
	public void dropSelected() 
	{
		// TODO
		
		if (list.isEmpty()) 
		{
	        return;
	    }

	    ArrayList<Integer> columnsToUpdate = new ArrayList<>();
	    for (Tile z : list) {
	        int vertical = z.getX();
	        if (!columnsToUpdate.contains(vertical))
	        {
	            columnsToUpdate.add(vertical);
	        }
	    }

	    for (int vertical : columnsToUpdate)
	    {
	        ArrayList<Tile> columnTiles = new ArrayList<>();
	        
	        for (int horizontal = 0; horizontal < completeGrid.getHeight(); horizontal++)
	        	
	        {
	            Tile mainTile = completeGrid.getTile(vertical, horizontal);
	            if (!list.contains(mainTile)) 
	            {
	                columnTiles.add(mainTile);
	            }
	        }
	        
	        int droppingTiles = completeGrid.getHeight() - columnTiles.size();
	        
	        for (int x = 0; x < droppingTiles; ++x)
	        {
	            columnTiles.add(0, getRandomTile());
	        }
	        for (int horizontal = 0; horizontal < completeGrid.getHeight(); horizontal++)
	        {
	            completeGrid.setTile(columnTiles.get(horizontal),vertical, horizontal);
	        }
	    }
	    
	    list.clear();
	}

	/**
	 * Remove the tile from the selected tiles.
	 * 
	 * @param x column of the tile
	 * @param y row of the tile
	 */
	public void unselect(int x, int y)
	{
		// TODO
		
		Tile mainTile = completeGrid.getTile(x, y);
		
		mainTile.setSelect(false);
		
		list.remove(mainTile);
	}

	/**
	 * Gets the player's score.
	 * 
	 * @return the score
	 */
	public long getScore()
	{
		
		
		return gameScore;
	}

	/**
	 * Gets the game grid.
	 * 
	 * @return the grid
	 */
	public Grid getGrid()
	{
		
		return completeGrid;
	}

	/**
	 * Gets the minimum tile level.
	 * 
	 * @return the minimum tile level
	 */
	public int getMinTileLevel()
	{
		
		return minGrid;
	}

	/**
	 * Gets the maximum tile level.
	 * 
	 * @return the maximum tile level
	 */
	public int getMaxTileLevel()
	{
		
		return maxGrid;
	}

	/**
	 * Sets the player's score.
	 * 
	 * @param score number of points
	 */
	public void setScore(long score)
	{
		
		
		gameScore = score;
	}

	/**
	 * Sets the game's grid.
	 * 
	 * @param grid game's grid
	 */
	public void setGrid(Grid grid) 
	{
		
		this.completeGrid = grid;
	}

	/**
	 * Sets the minimum tile level.
	 * 
	 * @param minTileLevel the lowest level tile
	 */
	public void setMinTileLevel(int minTileLevel)
	{
		
		
		
		minGrid = minTileLevel;
	}

	/**
	 * Sets the maximum tile level.
	 * 
	 * @param maxTileLevel the highest level tile
	 */
	public void setMaxTileLevel(int maxTileLevel) 
	
	{
		
		maxGrid = maxTileLevel;
	}

	/**
	 * Sets callback listeners for game events.
	 * 
	 * @param dialogListener listener for creating a user dialog
	 * @param scoreListener  listener for updating the player's score
	 */
	public void setListeners(ShowDialogListener dialogListener, ScoreUpdateListener scoreListener)
	{
		this.dialogListener = dialogListener;
		this.scoreListener = scoreListener;
	}

	/**
	 * Save the game to the given file path.
	 * 
	 * @param filePath location of file to save
	 */
	public void save(String filePath) 
	{
		GameFileUtil.save(filePath, this);
	}

	/**
	 * Load the game from the given file path
	 * 
	 * @param filePath location of file to load
	 */
	public void load(String filePath) 
	{
		GameFileUtil.load(filePath, this);
	}
}
